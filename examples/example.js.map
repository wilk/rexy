{"version":3,"sources":["webpack:///webpack/bootstrap 354123b2ffe4fad1c2ef","webpack:///./examples/example.ts","webpack:///./index.ts","webpack:///./lib/rexy-worker.ts"],"names":[],"mappings":"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","file":"example.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 354123b2ffe4fad1c2ef\n **/","import Rexy from '../index'\n\n(async function () {\n    try {\n        let rexy = new Rexy()\n\n        let res = await rexy.post({test: 'lool'})\n        console.log(res)\n        res = await rexy.get(res.id)\n        console.log(res)\n        res = await rexy.put(res.id, {test: 'ghgh', asd: 'hey!'})\n        console.log(res)\n        res = await rexy.get()\n        console.log(res)\n        await rexy.delete(res[0].id)\n    }\n    catch (err) {\n        console.error(err);\n    }\n})()\n\n\n/** WEBPACK FOOTER **\n ** ./examples/example.ts\n **/","import {IRequestPromise} from './lib/interfaces'\nimport {worker, RexyWorker, MemoryAdapter} from './lib/rexy-worker'\n\nfunction generateId(): string {\n    let text = ''\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n\n    for (let i = 0; i < 5; i++) text += possible.charAt(Math.floor(Math.random() * possible.length))\n\n    text += '_' + Date.now()\n\n    return text\n}\n\nexport default class Rexy {\n    private worker: Worker\n    private requests: Map<string, IRequestPromise>\n\n    constructor(adapter?: any) {\n        this.requests = new Map()\n\n        let blob: Blob\n\n        try {\n            blob = new Blob([RexyWorker.toString() + MemoryAdapter.toString() + worker.toString() + 'worker()'], {type: 'application/javascript'})\n        } catch (err) {\n            console.error(err)\n        }\n\n        this.worker = new Worker(URL.createObjectURL(blob))\n        this.worker.onmessage = (evt: MessageEvent) => {\n            let data = JSON.parse(evt.data)\n\n            if (data.action === 'response success') {\n                let req = this.requests.get(data.requestId)\n\n                req.resolve(data.response)\n                this.requests.delete(data.requestId)\n            }\n            else if (data.action === 'response failure') {\n                let req = this.requests.get(data.requestId)\n\n                req.reject(data.response)\n                this.requests.delete(data.requestId)\n            }\n        }\n\n        if (adapter) {\n            this.worker.postMessage(JSON.stringify({\n                action: 'set adapter',\n                adapter: adapter\n            }))\n        }\n    }\n\n    get(id?: any, opts?: any): Promise<any|Array<any>> {\n        return new Promise((resolve, reject) => {\n            let requestId = generateId()\n            this.requests.set(requestId, {resolve: resolve, reject: reject})\n            this.worker.postMessage(JSON.stringify({\n                action: 'GET',\n                requestId: requestId,\n                id: id,\n                opts: opts\n            }))\n        })\n    }\n\n    post(payload: any, opts?: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            let requestId = generateId()\n            this.requests.set(requestId, {resolve: resolve, reject: reject})\n            this.worker.postMessage(JSON.stringify({\n                action: 'POST',\n                requestId: requestId,\n                payload: payload,\n                opts: opts\n            }))\n        })\n    }\n\n    put(id: any, payload: any, opts?: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            let requestId = generateId()\n            this.requests.set(requestId, {resolve: resolve, reject: reject})\n            this.worker.postMessage(JSON.stringify({\n                action: 'PUT',\n                requestId: requestId,\n                id: id,\n                payload: payload,\n                opts: opts\n            }))\n        })\n    }\n\n    delete(id: any, opts?: any): Promise<any> {\n        return new Promise((resolve, reject) => {\n            let requestId = generateId()\n            this.requests.set(requestId, {resolve: resolve, reject: reject})\n            this.worker.postMessage(JSON.stringify({\n                action: 'DELETE',\n                requestId: requestId,\n                id: id,\n                opts: opts\n            }))\n        })\n    }\n}\n\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./index.ts\n **/","import {IRexyAdapter} from './interfaces'\n\nexport class MemoryAdapter implements IRexyAdapter {\n    private data:Map<number, any>\n\n    constructor() {\n        this.data = new Map()\n    }\n\n    get(id?:number, opts?:any):Promise<any|Array<any>> {\n        return new Promise((resolve, reject) => {\n            let result = null\n\n            if (id >= 0) result = this.data.get(id)\n            else {\n                result = []\n                for (let value of this.data.values()) result.push(value)\n                console.log(result)\n            }\n\n            if (result) resolve(result)\n            else reject(new Error(`no element found with id ${id}`))\n        })\n    }\n\n    post(payload:any, opts?:any):Promise<any> {\n        return new Promise(resolve => {\n            payload.id = this.data.size\n            this.data.set(payload.id, payload)\n            resolve(payload)\n        })\n    }\n\n    put(id:any, payload:any, opts?:any):Promise<any> {\n        return new Promise((resolve, reject) => {\n            let element = this.data.get(id)\n            if (typeof element === 'undefined' || element === null) return reject(new Error(`no element found with id ${id}`))\n\n            for (let key of Object.keys(payload)) {\n                if (key !== 'id') element[key] = payload[key]\n            }\n\n            this.data.set(id, element)\n            resolve(element)\n        })\n    }\n\n    delete(id:any, opts?:any):Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (this.data.delete(id)) resolve()\n            else reject(new Error(`no element found with id ${id}`))\n        })\n    }\n\n    clear():void {\n        this.data.clear()\n    }\n}\n\nexport class RexyWorker {\n    constructor(private _adapter:IRexyAdapter) {\n    }\n\n    get adapter():IRexyAdapter {\n        return this._adapter\n    }\n\n    set adapter(adapter:IRexyAdapter) {\n        this._adapter.clear()\n        this._adapter = adapter\n    }\n}\n\ndeclare function postMessage(data: any): void;\n\nexport function worker() {\n    console.log('ayo nonno!')\n    let rexy = new RexyWorker(new MemoryAdapter())\n\n    addEventListener('message', function (evt:MessageEvent) {\n        let data = JSON.parse(evt.data)\n\n        switch (data.action) {\n            case 'set adapter':\n                rexy.adapter = data.adapter\n                break\n            case 'GET':\n                rexy.adapter.get(data.id, data.opts)\n                    .then(res => {\n                        postMessage(JSON.stringify({\n                            action: 'response success',\n                            requestId: data.requestId,\n                            response: res\n                        }))\n                    })\n                    .catch(err => {\n                        postMessage(JSON.stringify({\n                            action: 'response failure',\n                            requestId: data.requestId,\n                            response: err\n                        }))\n                    })\n                break\n            case 'POST':\n                console.log('posting?')\n                rexy.adapter.post(data.payload, data.opts)\n                    .then(res => {\n                        console.log('postato cheers')\n                        postMessage(JSON.stringify({\n                            action: 'response success',\n                            requestId: data.requestId,\n                            response: res\n                        }))\n                    })\n                    .catch(err => {\n                        console.log('postato cheers error', err)\n                        postMessage(JSON.stringify({\n                            action: 'response failure',\n                            requestId: data.requestId,\n                            response: err\n                        }))\n                    })\n                break\n            case 'PUT':\n                rexy.adapter.put(data.id, data.payload, data.opts)\n                    .then(res => {\n                        postMessage(JSON.stringify({\n                            action: 'response success',\n                            requestId: data.requestId,\n                            response: res\n                        }))\n                    })\n                    .catch(err => {\n                        postMessage(JSON.stringify({\n                            action: 'response failure',\n                            requestId: data.requestId,\n                            response: err\n                        }))\n                    })\n                break\n            case 'DELETE':\n                rexy.adapter.delete(data.id, data.opts)\n                    .then(res => {\n                        postMessage(JSON.stringify({\n                            action: 'response success',\n                            requestId: data.requestId,\n                            response: res\n                        }))\n                    })\n                    .catch(err => {\n                        postMessage(JSON.stringify({\n                            action: 'response failure',\n                            requestId: data.requestId,\n                            response: err\n                        }))\n                    })\n                break\n        }\n    }, false)\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/rexy-worker.ts\n **/"],"sourceRoot":""}